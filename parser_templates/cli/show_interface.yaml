---
- name: match interface sections
  pattern_match:
    regex: "^\\S+ is (up|down)"
    match_all: yes
    match_greedy: yes
  register: context

- name: match interface values
  pattern_group:
    - name: match name
      pattern_match:
        regex: "^(.+) is (\\w+)"
        content: "{{ item }}"
      register: name

    - name: match admin state
      pattern_match:
        regex: "admin state is (\\S+)"
        content: "{{ item }}"
      register: admin_state

    - name: match mac address
      pattern_match:
        regex: "Hardware:  Ethernet, address: ([\\d|\\w]{4}.[\\d|\\w]{4}.[\\d|\\w]{4})"
        content: "{{ item }}"
      register: mac_addr

    - name: match description value
      pattern_match:
        regex: "Description: (.*)"
        content: "{{ item }}"
      register: description

    - name: match mtu value
      pattern_match:
        regex: "MTU (\\d+)"
        content: "{{ item }}"
      register: mtu

    - name: match ipv4 address
      pattern_match:
        regex: "Internet Address is (.+)"
        content: "{{ item }}"
      register: ipv4addr

    - name: match port mode
      pattern_match:
        regex: "Port mode is (.+)"
        content: "{{ item }}"
      register: port_mode

  loop: "{{ context }}"
  register: values

- name: build interface template
  json_template:
    template:
      - key: "{{ item.name.matches.0 }}"
        object:
          - key: oper_status
            value: "{{ item.name.matches.1 }}"
          - key: admin_status
            value: "{{ item.admin_state.matches.0}}"
          - key: mac_address
            value: "{{ item.mac_addr.matches.0 }}"
          - key: ipv4
            object:
              - key: address
                value: "{{ item.ipv4addr.matches.0.split('/')[0] }}"
              - key: masklen
                value: "{{ item.ipv4addr.matches.0.split('/')[1] }}"
            when: item.ipv4addr.matches
          - key: description
            value: "{{ item.description.matches.0 }}"
          - key: mtu
            value: "{{ item.mtu.matches.0 }}"
          - key: port_mode
            value: "{{ item.port_mode.matches.0}}"
  loop: "{{ values }}"
  register: interfaces
  export: yes
  export_as: dict
  extend: cisco_nxos
